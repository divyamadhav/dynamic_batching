print(CT)
#
#
# aici_batch4 <- rbind(aici_builds %>% filter(algorithm == 'BATCH4'), batch_builds %>% filter(algorithm == 'BATCH4'))
# aici_batchbisect <- rbind(aici_builds %>% filter(algorithm == 'BATCHBISECT'), batch_builds %>% filter(algorithm == 'BATCHBISECT'))
# aici_batchstop4 <- rbind(aici_builds %>% filter(algorithm == 'BATCHSTOP4'), batch_builds %>% filter(algorithm == 'BATCHSTOP4'))
#
# ssr_batch4 <- rbind(ssr_builds %>% filter(algorithm == 'BATCH4'), batch_builds %>% filter(algorithm == 'BATCH4'))
# ssr_batchbisect <- rbind(ssr_builds %>% filter(algorithm == 'BATCHBISECT'), batch_builds %>% filter(algorithm == 'BATCHBISECT'))
# ssr_batchstop4 <- rbind(ssr_builds %>% filter(algorithm == 'BATCHSTOP4'), batch_builds %>% filter(algorithm == 'BATCHSTOP4'))
#
#
# # measuring statistical significance of 'builds reqd' between variations of batching, aici and ssr
# main_algs <- list(aici_builds, ssr_builds, batch_builds)
# list_range <- 1:3
#
# for (i in list_range) {
#
#   m_data <- main_algs[[i]]
#
#   res <- friedman.test(builds_reqd ~ method_alg_batch | project, data = m_data)
#   print(res)
#
#   FT = xtabs(builds_reqd ~ method_alg_batch + project,
#              data = m_data)
#
#   K <- KendallW(FT, correct=TRUE, test=TRUE)
#   print(K)
#   CT = frdAllPairsConoverTest(y      = m_data$builds_reqd,
#                               groups = m_data$method_alg_batch,
#                               blocks = m_data$project,
#                               p.adjust.method="BH")
#   print(CT)
#
# }
#
# # # The following lines perform Pairwise Wilcoxon for Variant to Baseline comparisons
# # # for each batching algorithm using SSR & AICI
# #
#
# aici_variants <- list(aici_batch4, aici_batchbisect, aici_batchstop4)
# ssr_variants <- list(ssr_batch4, ssr_batchbisect, ssr_batchstop4)
#
# for (i in list_range) {
#   print(algorithms[i])
#   print("AICI")
#
#   aici_method <- aici_variants[[i]]
#   ssr_method <- ssr_variants[[i]]
#
#   res <- friedman.test(builds_reqd ~ method_alg_batch | project, data = aici_method)
#   print(res)
#
#   FT = xtabs(builds_reqd ~ method_alg_batch + project,
#              data = aici_method)
#
#   K <- KendallW(FT, correct=TRUE, test=TRUE)
#   print(K)
#   CT = frdAllPairsConoverTest(y      = aici_method$builds_reqd,
#                               groups = aici_method$method_alg_batch,
#                               blocks = aici_method$project,
#                               p.adjust.method="BH")
#   print(CT)
#
#
#   print(algorithms[i])
#   print("SSR")
#   res <- friedman.test(builds_reqd ~ method_alg_batch | project, data = ssr_method)
#   print(res)
#
#   FT = xtabs(builds_reqd ~ method_alg_batch + project,
#              data = ssr_method)
#
#   K <- KendallW(FT, correct=TRUE, test=TRUE)
#   print(K)
#   CT = frdAllPairsConoverTest(y      = ssr_method$builds_reqd,
#                               groups = ssr_method$method_alg_batch,
#                               blocks = ssr_method$project,
#                               p.adjust.method="BH")
#   print(CT)
#
# }
library(dplyr)
library(effsize)
library(FSA)
library(PMCMRplus)
library(DescTools)
build_data <- read.csv('/Users/divyakamath/Documents/Submitted Papers/EMSE MLCI, TR/Statistics/Final_Results.csv')
algorithms <- list('BATCH4', 'BATCHBISECT', 'BATCHSTOP4')
methods <- list('gr', 'sbs', 'ssr', 'aici')
build_data['method_alg'] <- paste(build_data$method, build_data$algorithm)
build_data['method_alg_batch'] <- paste(build_data$method_alg, build_data$batch_size)
aici_builds <- build_data %>% filter(method == 'aici')
ssr_builds <- build_data %>% filter(method == 'ssr')
batch_builds <- build_data %>% filter(method == 'gr')
sbs_builds <- build_data %>% filter((method == 'sbs') & (algorithm == 'BATCH4'))
aici_sbs_builds <- rbind(sbs_builds, aici_builds)
ssr_sbs_builds<- rbind(sbs_builds, ssr_builds)
res <- friedman.test(builds_reqd ~ method_alg_batch | project, data = aici_sbs_builds)
print(res)
FT = xtabs(builds_reqd ~ method_alg_batch + project,
data = aici_sbs_builds)
K <- KendallW(FT, correct=TRUE, test=TRUE)
print(K)
CT = frdAllPairsConoverTest(y      = aici_sbs_builds$builds_reqd,
groups = aici_sbs_builds$method_alg_batch,
blocks = aici_sbs_builds$project,
p.adjust.method="BH")
print(CT)
#
#
# aici_batch4 <- rbind(aici_builds %>% filter(algorithm == 'BATCH4'), batch_builds %>% filter(algorithm == 'BATCH4'))
# aici_batchbisect <- rbind(aici_builds %>% filter(algorithm == 'BATCHBISECT'), batch_builds %>% filter(algorithm == 'BATCHBISECT'))
# aici_batchstop4 <- rbind(aici_builds %>% filter(algorithm == 'BATCHSTOP4'), batch_builds %>% filter(algorithm == 'BATCHSTOP4'))
#
# ssr_batch4 <- rbind(ssr_builds %>% filter(algorithm == 'BATCH4'), batch_builds %>% filter(algorithm == 'BATCH4'))
# ssr_batchbisect <- rbind(ssr_builds %>% filter(algorithm == 'BATCHBISECT'), batch_builds %>% filter(algorithm == 'BATCHBISECT'))
# ssr_batchstop4 <- rbind(ssr_builds %>% filter(algorithm == 'BATCHSTOP4'), batch_builds %>% filter(algorithm == 'BATCHSTOP4'))
#
#
# # measuring statistical significance of 'builds reqd' between variations of batching, aici and ssr
# main_algs <- list(aici_builds, ssr_builds, batch_builds)
# list_range <- 1:3
#
# for (i in list_range) {
#
#   m_data <- main_algs[[i]]
#
#   res <- friedman.test(builds_reqd ~ method_alg_batch | project, data = m_data)
#   print(res)
#
#   FT = xtabs(builds_reqd ~ method_alg_batch + project,
#              data = m_data)
#
#   K <- KendallW(FT, correct=TRUE, test=TRUE)
#   print(K)
#   CT = frdAllPairsConoverTest(y      = m_data$builds_reqd,
#                               groups = m_data$method_alg_batch,
#                               blocks = m_data$project,
#                               p.adjust.method="BH")
#   print(CT)
#
# }
#
# # # The following lines perform Pairwise Wilcoxon for Variant to Baseline comparisons
# # # for each batching algorithm using SSR & AICI
# #
#
# aici_variants <- list(aici_batch4, aici_batchbisect, aici_batchstop4)
# ssr_variants <- list(ssr_batch4, ssr_batchbisect, ssr_batchstop4)
#
# for (i in list_range) {
#   print(algorithms[i])
#   print("AICI")
#
#   aici_method <- aici_variants[[i]]
#   ssr_method <- ssr_variants[[i]]
#
#   res <- friedman.test(builds_reqd ~ method_alg_batch | project, data = aici_method)
#   print(res)
#
#   FT = xtabs(builds_reqd ~ method_alg_batch + project,
#              data = aici_method)
#
#   K <- KendallW(FT, correct=TRUE, test=TRUE)
#   print(K)
#   CT = frdAllPairsConoverTest(y      = aici_method$builds_reqd,
#                               groups = aici_method$method_alg_batch,
#                               blocks = aici_method$project,
#                               p.adjust.method="BH")
#   print(CT)
#
#
#   print(algorithms[i])
#   print("SSR")
#   res <- friedman.test(builds_reqd ~ method_alg_batch | project, data = ssr_method)
#   print(res)
#
#   FT = xtabs(builds_reqd ~ method_alg_batch + project,
#              data = ssr_method)
#
#   K <- KendallW(FT, correct=TRUE, test=TRUE)
#   print(K)
#   CT = frdAllPairsConoverTest(y      = ssr_method$builds_reqd,
#                               groups = ssr_method$method_alg_batch,
#                               blocks = ssr_method$project,
#                               p.adjust.method="BH")
#   print(CT)
#
# }
library(dplyr)
library(effsize)
library(FSA)
library(PMCMRplus)
library(DescTools)
build_data <- read.csv('/Users/divyakamath/Documents/Submitted Papers/EMSE MLCI, TR/Statistics/Final_Results.csv')
algorithms <- list('BATCH4', 'BATCHBISECT', 'BATCHSTOP4')
methods <- list('gr', 'sbs', 'ssr', 'aici')
build_data['method_alg'] <- paste(build_data$method, build_data$algorithm)
build_data['method_alg_batch'] <- paste(build_data$method_alg, build_data$batch_size)
aici_builds <- build_data %>% filter(method == 'aici')
ssr_builds <- build_data %>% filter(method == 'ssr')
batch_builds <- build_data %>% filter(method == 'gr')
sbs_builds <- build_data %>% filter((method == 'sbs') & (algorithm == 'BATCH4'))
aici_sbs_builds <- rbind(sbs_builds, aici_builds)
ssr_sbs_builds<- rbind(sbs_builds, ssr_builds)
res <- friedman.test(builds_reqd ~ method_alg_batch | project, data = ssr_sbs_builds)
print(res)
FT = xtabs(builds_reqd ~ method_alg_batch + project,
data = ssr_sbs_builds)
K <- KendallW(FT, correct=TRUE, test=TRUE)
print(K)
CT = frdAllPairsConoverTest(y      = ssr_sbs_builds$builds_reqd,
groups = ssr_sbs_builds$method_alg_batch,
blocks = ssr_sbs_builds$project,
p.adjust.method="BH")
print(CT)
#
#
# aici_batch4 <- rbind(aici_builds %>% filter(algorithm == 'BATCH4'), batch_builds %>% filter(algorithm == 'BATCH4'))
# aici_batchbisect <- rbind(aici_builds %>% filter(algorithm == 'BATCHBISECT'), batch_builds %>% filter(algorithm == 'BATCHBISECT'))
# aici_batchstop4 <- rbind(aici_builds %>% filter(algorithm == 'BATCHSTOP4'), batch_builds %>% filter(algorithm == 'BATCHSTOP4'))
#
# ssr_batch4 <- rbind(ssr_builds %>% filter(algorithm == 'BATCH4'), batch_builds %>% filter(algorithm == 'BATCH4'))
# ssr_batchbisect <- rbind(ssr_builds %>% filter(algorithm == 'BATCHBISECT'), batch_builds %>% filter(algorithm == 'BATCHBISECT'))
# ssr_batchstop4 <- rbind(ssr_builds %>% filter(algorithm == 'BATCHSTOP4'), batch_builds %>% filter(algorithm == 'BATCHSTOP4'))
#
#
# # measuring statistical significance of 'builds reqd' between variations of batching, aici and ssr
# main_algs <- list(aici_builds, ssr_builds, batch_builds)
# list_range <- 1:3
#
# for (i in list_range) {
#
#   m_data <- main_algs[[i]]
#
#   res <- friedman.test(builds_reqd ~ method_alg_batch | project, data = m_data)
#   print(res)
#
#   FT = xtabs(builds_reqd ~ method_alg_batch + project,
#              data = m_data)
#
#   K <- KendallW(FT, correct=TRUE, test=TRUE)
#   print(K)
#   CT = frdAllPairsConoverTest(y      = m_data$builds_reqd,
#                               groups = m_data$method_alg_batch,
#                               blocks = m_data$project,
#                               p.adjust.method="BH")
#   print(CT)
#
# }
#
# # # The following lines perform Pairwise Wilcoxon for Variant to Baseline comparisons
# # # for each batching algorithm using SSR & AICI
# #
#
# aici_variants <- list(aici_batch4, aici_batchbisect, aici_batchstop4)
# ssr_variants <- list(ssr_batch4, ssr_batchbisect, ssr_batchstop4)
#
# for (i in list_range) {
#   print(algorithms[i])
#   print("AICI")
#
#   aici_method <- aici_variants[[i]]
#   ssr_method <- ssr_variants[[i]]
#
#   res <- friedman.test(builds_reqd ~ method_alg_batch | project, data = aici_method)
#   print(res)
#
#   FT = xtabs(builds_reqd ~ method_alg_batch + project,
#              data = aici_method)
#
#   K <- KendallW(FT, correct=TRUE, test=TRUE)
#   print(K)
#   CT = frdAllPairsConoverTest(y      = aici_method$builds_reqd,
#                               groups = aici_method$method_alg_batch,
#                               blocks = aici_method$project,
#                               p.adjust.method="BH")
#   print(CT)
#
#
#   print(algorithms[i])
#   print("SSR")
#   res <- friedman.test(builds_reqd ~ method_alg_batch | project, data = ssr_method)
#   print(res)
#
#   FT = xtabs(builds_reqd ~ method_alg_batch + project,
#              data = ssr_method)
#
#   K <- KendallW(FT, correct=TRUE, test=TRUE)
#   print(K)
#   CT = frdAllPairsConoverTest(y      = ssr_method$builds_reqd,
#                               groups = ssr_method$method_alg_batch,
#                               blocks = ssr_method$project,
#                               p.adjust.method="BH")
#   print(CT)
#
# }
library(dplyr)
library(effsize)
library(FSA)
library(PMCMRplus)
library(DescTools)
build_data <- read.csv('/Users/divyakamath/Documents/Submitted Papers/EMSE MLCI, TR/Statistics/Final_Results.csv')
algorithms <- list('BATCH4', 'BATCHBISECT', 'BATCHSTOP4')
methods <- list('gr', 'sbs', 'ssr', 'aici')
build_data['method_alg'] <- paste(build_data$method, build_data$algorithm)
build_data['method_alg_batch'] <- paste(build_data$method_alg, build_data$batch_size)
aici_builds <- build_data %>% filter(method == 'aici')
ssr_builds <- build_data %>% filter(method == 'ssr')
batch_builds <- build_data %>% filter(method == 'gr')
sbs_builds <- build_data %>% filter((method == 'sbs') & (algorithm == 'BATCH4'))
aici_sbs_builds <- rbind(sbs_builds, aici_builds)
ssr_sbs_builds<- rbind(sbs_builds, ssr_builds)
res <- friedman.test(median_delay ~ method_alg_batch | project, data = ssr_sbs_builds)
print(res)
FT = xtabs(median_delay ~ method_alg_batch + project,
data = ssr_sbs_builds)
K <- KendallW(FT, correct=TRUE, test=TRUE)
print(K)
CT = frdAllPairsConoverTest(y      = ssr_sbs_builds$median_delay,
groups = ssr_sbs_builds$method_alg_batch,
blocks = ssr_sbs_builds$project,
p.adjust.method="BH")
print(CT)
# aici_batch4 <- rbind(aici_builds %>% filter(algorithm == 'BATCH4'), batch_builds %>% filter(algorithm == 'BATCH4'))
# aici_batchbisect <- rbind(aici_builds %>% filter(algorithm == 'BATCHBISECT'), batch_builds %>% filter(algorithm == 'BATCHBISECT'))
# aici_batchstop4 <- rbind(aici_builds %>% filter(algorithm == 'BATCHSTOP4'), batch_builds %>% filter(algorithm == 'BATCHSTOP4'))
#
# ssr_batch4 <- rbind(ssr_builds %>% filter(algorithm == 'BATCH4'), batch_builds %>% filter(algorithm == 'BATCH4'))
# ssr_batchbisect <- rbind(ssr_builds %>% filter(algorithm == 'BATCHBISECT'), batch_builds %>% filter(algorithm == 'BATCHBISECT'))
# ssr_batchstop4 <- rbind(ssr_builds %>% filter(algorithm == 'BATCHSTOP4'), batch_builds %>% filter(algorithm == 'BATCHSTOP4'))
#
#
# # measuring statistical significance of 'builds reqd' between variations of batching, aici and ssr
# main_algs <- list(aici_builds, ssr_builds, batch_builds)
# list_range <- 1:3
#
# for (i in list_range) {
#
#   m_data <- main_algs[[i]]
#
#   res <- friedman.test(median_delay ~ method_alg_batch | project, data = m_data)
#   print(res)
#
#   FT = xtabs(median_delay ~ method_alg_batch + project,
#              data = m_data)
#
#   K <- KendallW(FT, correct=TRUE, test=TRUE)
#   print(K)
#   CT = frdAllPairsConoverTest(y      = m_data$median_delay,
#                               groups = m_data$method_alg_batch,
#                               blocks = m_data$project,
#                               p.adjust.method="BH")
#   print(CT)
#
# }
#
# # # The following lines perform Pairwise Wilcoxon for Variant to Baseline comparisons
# # # for each batching algorithm using SSR & AICI
# #
#
# aici_variants <- list(aici_batch4, aici_batchbisect, aici_batchstop4)
# ssr_variants <- list(ssr_batch4, ssr_batchbisect, ssr_batchstop4)
#
# for (i in list_range) {
#   print(algorithms[i])
#   print("AICI")
#
#   aici_method <- aici_variants[[i]]
#   ssr_method <- ssr_variants[[i]]
#
#   res <- friedman.test(median_delay ~ method_alg_batch | project, data = aici_method)
#   print(res)
#
#   FT = xtabs(median_delay ~ method_alg_batch + project,
#              data = aici_method)
#
#   K <- KendallW(FT, correct=TRUE, test=TRUE)
#   print(K)
#   CT = frdAllPairsConoverTest(y      = aici_method$median_delay,
#                               groups = aici_method$method_alg_batch,
#                               blocks = aici_method$project,
#                               p.adjust.method="BH")
#   print(CT)
#
#
#   print(algorithms[i])
#   print("SSR")
#   res <- friedman.test(median_delay ~ method_alg_batch | project, data = ssr_method)
#   print(res)
#
#   FT = xtabs(median_delay ~ method_alg_batch + project,
#              data = ssr_method)
#
#   K <- KendallW(FT, correct=TRUE, test=TRUE)
#   print(K)
#   CT = frdAllPairsConoverTest(y      = ssr_method$median_delay,
#                               groups = ssr_method$method_alg_batch,
#                               blocks = ssr_method$project,
#                               p.adjust.method="BH")
#   print(CT)
#
# }
#
library(dplyr)
library(effsize)
library(FSA)
library(PMCMRplus)
library(DescTools)
build_data <- read.csv('/Users/divyakamath/Documents/Submitted Papers/EMSE MLCI, TR/Statistics/Final_Results.csv')
algorithms <- list('BATCH4', 'BATCHBISECT', 'BATCHSTOP4')
methods <- list('gr', 'sbs', 'ssr', 'aici')
build_data['method_alg'] <- paste(build_data$method, build_data$algorithm)
build_data['method_alg_batch'] <- paste(build_data$method_alg, build_data$batch_size)
aici_builds <- build_data %>% filter(method == 'aici')
ssr_builds <- build_data %>% filter(method == 'ssr')
batch_builds <- build_data %>% filter(method == 'gr')
sbs_builds <- build_data %>% filter((method == 'sbs') & (algorithm == 'BATCH4'))
aici_sbs_builds <- rbind(sbs_builds, aici_builds)
ssr_sbs_builds<- rbind(sbs_builds, ssr_builds)
res <- friedman.test(median_delay ~ method_alg_batch | project, data = aici_sbs_builds)
print(res)
FT = xtabs(median_delay ~ method_alg_batch + project,
data = aici_sbs_builds)
K <- KendallW(FT, correct=TRUE, test=TRUE)
print(K)
CT = frdAllPairsConoverTest(y      = aici_sbs_builds$median_delay,
groups = aici_sbs_builds$method_alg_batch,
blocks = aici_sbs_builds$project,
p.adjust.method="BH")
print(CT)
# aici_batch4 <- rbind(aici_builds %>% filter(algorithm == 'BATCH4'), batch_builds %>% filter(algorithm == 'BATCH4'))
# aici_batchbisect <- rbind(aici_builds %>% filter(algorithm == 'BATCHBISECT'), batch_builds %>% filter(algorithm == 'BATCHBISECT'))
# aici_batchstop4 <- rbind(aici_builds %>% filter(algorithm == 'BATCHSTOP4'), batch_builds %>% filter(algorithm == 'BATCHSTOP4'))
#
# ssr_batch4 <- rbind(ssr_builds %>% filter(algorithm == 'BATCH4'), batch_builds %>% filter(algorithm == 'BATCH4'))
# ssr_batchbisect <- rbind(ssr_builds %>% filter(algorithm == 'BATCHBISECT'), batch_builds %>% filter(algorithm == 'BATCHBISECT'))
# ssr_batchstop4 <- rbind(ssr_builds %>% filter(algorithm == 'BATCHSTOP4'), batch_builds %>% filter(algorithm == 'BATCHSTOP4'))
#
#
# # measuring statistical significance of 'builds reqd' between variations of batching, aici and ssr
# main_algs <- list(aici_builds, ssr_builds, batch_builds)
# list_range <- 1:3
#
# for (i in list_range) {
#
#   m_data <- main_algs[[i]]
#
#   res <- friedman.test(median_delay ~ method_alg_batch | project, data = m_data)
#   print(res)
#
#   FT = xtabs(median_delay ~ method_alg_batch + project,
#              data = m_data)
#
#   K <- KendallW(FT, correct=TRUE, test=TRUE)
#   print(K)
#   CT = frdAllPairsConoverTest(y      = m_data$median_delay,
#                               groups = m_data$method_alg_batch,
#                               blocks = m_data$project,
#                               p.adjust.method="BH")
#   print(CT)
#
# }
#
# # # The following lines perform Pairwise Wilcoxon for Variant to Baseline comparisons
# # # for each batching algorithm using SSR & AICI
# #
#
# aici_variants <- list(aici_batch4, aici_batchbisect, aici_batchstop4)
# ssr_variants <- list(ssr_batch4, ssr_batchbisect, ssr_batchstop4)
#
# for (i in list_range) {
#   print(algorithms[i])
#   print("AICI")
#
#   aici_method <- aici_variants[[i]]
#   ssr_method <- ssr_variants[[i]]
#
#   res <- friedman.test(median_delay ~ method_alg_batch | project, data = aici_method)
#   print(res)
#
#   FT = xtabs(median_delay ~ method_alg_batch + project,
#              data = aici_method)
#
#   K <- KendallW(FT, correct=TRUE, test=TRUE)
#   print(K)
#   CT = frdAllPairsConoverTest(y      = aici_method$median_delay,
#                               groups = aici_method$method_alg_batch,
#                               blocks = aici_method$project,
#                               p.adjust.method="BH")
#   print(CT)
#
#
#   print(algorithms[i])
#   print("SSR")
#   res <- friedman.test(median_delay ~ method_alg_batch | project, data = ssr_method)
#   print(res)
#
#   FT = xtabs(median_delay ~ method_alg_batch + project,
#              data = ssr_method)
#
#   K <- KendallW(FT, correct=TRUE, test=TRUE)
#   print(K)
#   CT = frdAllPairsConoverTest(y      = ssr_method$median_delay,
#                               groups = ssr_method$method_alg_batch,
#                               blocks = ssr_method$project,
#                               p.adjust.method="BH")
#   print(CT)
#
# }
#
