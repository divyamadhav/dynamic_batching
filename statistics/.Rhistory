build_data['final_methods'] <- final_methods
res <- kruskal.test(builds_saved ~ final_methods, data = build_data)
print(res)
res <- pairwise.wilcox.test(build_data$builds_saved, build_data$final_methods,p.adjust.method = "BH")
print(res)
for (alg in algorithms) {
alg_data <- build_data %>% filter(algorithm == alg)
linear_2 <- alg_data %>% filter(update_method == "linear" | factor == "2")
linear_3 <- alg_data %>% filter(update_method == "linear" | factor == "3")
linear_4 <- alg_data %>% filter(update_method == "linear" | factor == "4")
exponential_2 <- alg_data %>% filter(update_method == "exponential" | factor == "2")
exponential_3 <- alg_data %>% filter(update_method == "exponential" | factor == "3")
random_linear <- alg_data %>% filter(update_method == "random_linear" | factor == "-1")
random_exp <- alg_data %>% filter(update_method == "random_exponential" | factor == "-1")
stagger_2 <- alg_data %>% filter(update_method == "stagger" | factor == "2")
stagger_3 <- alg_data %>% filter(update_method == "stagger" | factor == "3")
res <- kruskal.test(builds_saved ~ final_methods, data = alg_data)
print(res)
res <- pairwise.wilcox.test(alg_data$builds_saved, alg_data$final_methods,p.adjust.method = "BH")
print(res)
}
# kruskal.test(builds_saved ~ method, data = baseline_dynamic)
#
# N <- 94
# res <- pairwise.wilcox.test(static_batching$builds_saved, static_batching$method,p.adjust.method = "BH")
# res
# Za = qnorm(res$p.value/2)
# ra = abs(Za)/sqrt(N)
# ra
# N <- 94
# res <- pairwise.wilcox.test(baseline_dynamic$builds_saved, baseline_dynamic$method,p.adjust.method = "BH")
# res
# Za = qnorm(res$p.value/2)
# ra = abs(Za)/sqrt(N)
# ra
#
# timeout_projects <- unique(build_data[build_data$method == "timeout_rule", "project"])
# timeout_new_dynamic <- filter(new_dynamic, project %in% timeout_projects)
#
# temp_projects <- unique(timeout_new_dynamic[, "project"])
# new_timeout_rule <- filter(timeout_rule, project %in% temp_projects)
#
# kruskal.test(builds_saved ~ method, data = new_timeout_rule)
# N <- 36
# res <- pairwise.wilcox.test(new_timeout_rule$builds_saved, new_timeout_rule$method,p.adjust.method = "BH")
# res
# Za = qnorm(res$p.value/2)
# ra = abs(Za)/sqrt(N)
# ra
# baseline <- ssr_batch4 %>% filter(Group == "Batch4_Builds" )
# hybrid <- ssr_batch4 %>% filter(Group == "SSR_Batch4_Builds" )
# res <- wilcox.test(baseline$BuildsRequired, hybrid$BuildsRequired, p.adjust.method = "BH")
# res
# Za = qnorm(res$p.value/2)
# ra = abs(Za)/sqrt(N)
# ra
build_data <- read.csv('batch_update_methods.csv')
baseline_data <- read.csv('baseline_dynamic_batching.csv')
library(dplyr)
group_by(build_data, update_method) %>%
summarise(
count = n(),
mean = mean(builds_saved, na.rm = TRUE),
sd = sd(builds_saved, na.rm = TRUE),
median = median(builds_saved, na.rm = TRUE),
IQR = IQR(builds_saved, na.rm = TRUE)
)
algorithms <- list("BATCHBISECT", "BATCHSTOP4", "BATCHDIVIDE4")
methods <- list(build_data$update_method)
factors <- list(build_data$factor)
final_methods <- c(methods, factors)
build_data['final_methods'] <- final_methods
kruskal.test(builds_saved ~ final_methods, data = build_data)
pairwise.wilcox.test(build_data$builds_saved, build_data$final_methods,p.adjust.method = "BH")
for (alg in algorithms) {
alg_data <- build_data %>% filter(algorithm == alg)
baseline_alg <- baseline_data %>% filter(algorithm == alg)
res <- kruskal.test(builds_saved ~ final_methods, data = alg_data)
print(res)
res <- pairwise.wilcox.test(alg_data$builds_saved, alg_data$final_methods,p.adjust.method = "BH")
print(res)
linear_2 <- alg_data %>% filter(update_method == "linear" | factor == "2")
linear_3 <- alg_data %>% filter(update_method == "linear" | factor == "3")
linear_4 <- alg_data %>% filter(update_method == "linear" | factor == "4")
exponential_2 <- alg_data %>% filter(update_method == "exponential" | factor == "2")
exponential_3 <- alg_data %>% filter(update_method == "exponential" | factor == "3")
random_linear <- alg_data %>% filter(update_method == "random_linear" | factor == "-1")
random_exp <- alg_data %>% filter(update_method == "random_exponential" | factor == "-1")
stagger_2 <- alg_data %>% filter(update_method == "stagger" | factor == "2")
stagger_3 <- alg_data %>% filter(update_method == "stagger" | factor == "3")
res <- wilcox.test(linear_2$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
}
print(len(linear_2))
print(lengths(linear_2))
print(lengths(baseline_alg$builds_saved))
print(lengths(baseline_alg))
linear_2 <- alg_data %>% filter(update_method == "linear" & factor == "2")
print(lengths(linear_2))
build_data <- read.csv('batch_update_methods.csv')
baseline_data <- read.csv('baseline_dynamic_batching.csv')
library(dplyr)
group_by(build_data, update_method) %>%
summarise(
count = n(),
mean = mean(builds_saved, na.rm = TRUE),
sd = sd(builds_saved, na.rm = TRUE),
median = median(builds_saved, na.rm = TRUE),
IQR = IQR(builds_saved, na.rm = TRUE)
)
algorithms <- list("BATCHBISECT", "BATCHSTOP4", "BATCHDIVIDE4")
methods <- list(build_data$update_method)
factors <- list(build_data$factor)
final_methods <- c(methods, factors)
build_data['final_methods'] <- final_methods
kruskal.test(builds_saved ~ final_methods, data = build_data)
pairwise.wilcox.test(build_data$builds_saved, build_data$final_methods,p.adjust.method = "BH")
for (alg in algorithms) {
alg_data <- build_data %>% filter(algorithm == alg)
baseline_alg <- baseline_data %>% filter(algorithm == alg)
res <- kruskal.test(builds_saved ~ final_methods, data = alg_data)
print(res)
res <- pairwise.wilcox.test(alg_data$builds_saved, alg_data$final_methods,p.adjust.method = "BH")
print(res)
linear_2 <- alg_data %>% filter(update_method == "linear" & factor == "2")
linear_3 <- alg_data %>% filter(update_method == "linear" & factor == "3")
linear_4 <- alg_data %>% filter(update_method == "linear" & factor == "4")
exponential_2 <- alg_data %>% filter(update_method == "exponential" & factor == "2")
exponential_3 <- alg_data %>% filter(update_method == "exponential" & factor == "3")
random_linear <- alg_data %>% filter(update_method == "random_linear" & factor == "-1")
random_exp <- alg_data %>% filter(update_method == "random_exponential" & factor == "-1")
stagger_2 <- alg_data %>% filter(update_method == "stagger" & factor == "2")
stagger_3 <- alg_data %>% filter(update_method == "stagger" & factor == "3")
res <- wilcox.test(linear_2$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
}
# kruskal.test(builds_saved ~ method, data = baseline_dynamic)
#
# N <- 94
# res <- pairwise.wilcox.test(static_batching$builds_saved, static_batching$method,p.adjust.method = "BH")
# res
# Za = qnorm(res$p.value/2)
# ra = abs(Za)/sqrt(N)
# ra
# N <- 94
# res <- pairwise.wilcox.test(baseline_dynamic$builds_saved, baseline_dynamic$method,p.adjust.method = "BH")
# res
# Za = qnorm(res$p.value/2)
# ra = abs(Za)/sqrt(N)
# ra
#
# timeout_projects <- unique(build_data[build_data$method == "timeout_rule", "project"])
# timeout_new_dynamic <- filter(new_dynamic, project %in% timeout_projects)
#
# temp_projects <- unique(timeout_new_dynamic[, "project"])
# new_timeout_rule <- filter(timeout_rule, project %in% temp_projects)
#
# kruskal.test(builds_saved ~ method, data = new_timeout_rule)
# N <- 36
# res <- pairwise.wilcox.test(new_timeout_rule$builds_saved, new_timeout_rule$method,p.adjust.method = "BH")
# res
# Za = qnorm(res$p.value/2)
# ra = abs(Za)/sqrt(N)
# ra
# baseline <- ssr_batch4 %>% filter(Group == "Batch4_Builds" )
# hybrid <- ssr_batch4 %>% filter(Group == "SSR_Batch4_Builds" )
# res <- wilcox.test(baseline$BuildsRequired, hybrid$BuildsRequired, p.adjust.method = "BH")
# res
# Za = qnorm(res$p.value/2)
# ra = abs(Za)/sqrt(N)
# ra
build_data <- read.csv('batch_update_methods.csv')
baseline_data <- read.csv('baseline_dynamic_batching.csv')
library(dplyr)
group_by(build_data, update_method) %>%
summarise(
count = n(),
mean = mean(builds_saved, na.rm = TRUE),
sd = sd(builds_saved, na.rm = TRUE),
median = median(builds_saved, na.rm = TRUE),
IQR = IQR(builds_saved, na.rm = TRUE)
)
algorithms <- list("BATCHBISECT", "BATCHSTOP4", "BATCHDIVIDE4")
methods <- list(build_data$update_method)
factors <- list(build_data$factor)
final_methods <- c(methods, factors)
build_data['final_methods'] <- final_methods
kruskal.test(builds_saved ~ final_methods, data = build_data)
pairwise.wilcox.test(build_data$builds_saved, build_data$final_methods,p.adjust.method = "BH")
for (alg in algorithms) {
alg_data <- build_data %>% filter(algorithm == alg)
baseline_alg <- baseline_data %>% filter(algorithm == alg)
res <- kruskal.test(builds_saved ~ final_methods, data = alg_data)
print(res)
res <- pairwise.wilcox.test(alg_data$builds_saved, alg_data$final_methods,p.adjust.method = "BH")
print(res)
linear_2 <- alg_data %>% filter(update_method == "linear" & factor == "2")
linear_3 <- alg_data %>% filter(update_method == "linear" & factor == "3")
linear_4 <- alg_data %>% filter(update_method == "linear" & factor == "4")
exponential_2 <- alg_data %>% filter(update_method == "exponential" & factor == "2")
exponential_3 <- alg_data %>% filter(update_method == "exponential" & factor == "3")
random_linear <- alg_data %>% filter(update_method == "random_linear" & factor == "-1")
random_exp <- alg_data %>% filter(update_method == "random_exponential" & factor == "-1")
stagger_2 <- alg_data %>% filter(update_method == "stagger" & factor == "2")
stagger_3 <- alg_data %>% filter(update_method == "stagger" & factor == "3")
res <- wilcox.test(linear_2$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(linear_3$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(linear_4$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(exponential_2$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(exponential_3$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(random_linear$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(random_exp$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(stagger_2$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(stagger_3$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
}
# kruskal.test(builds_saved ~ method, data = baseline_dynamic)
#
# N <- 94
# res <- pairwise.wilcox.test(static_batching$builds_saved, static_batching$method,p.adjust.method = "BH")
# res
# Za = qnorm(res$p.value/2)
# ra = abs(Za)/sqrt(N)
# ra
# N <- 94
# res <- pairwise.wilcox.test(baseline_dynamic$builds_saved, baseline_dynamic$method,p.adjust.method = "BH")
# res
# Za = qnorm(res$p.value/2)
# ra = abs(Za)/sqrt(N)
# ra
#
# timeout_projects <- unique(build_data[build_data$method == "timeout_rule", "project"])
# timeout_new_dynamic <- filter(new_dynamic, project %in% timeout_projects)
#
# temp_projects <- unique(timeout_new_dynamic[, "project"])
# new_timeout_rule <- filter(timeout_rule, project %in% temp_projects)
#
# kruskal.test(builds_saved ~ method, data = new_timeout_rule)
# N <- 36
# res <- pairwise.wilcox.test(new_timeout_rule$builds_saved, new_timeout_rule$method,p.adjust.method = "BH")
# res
# Za = qnorm(res$p.value/2)
# ra = abs(Za)/sqrt(N)
# ra
# baseline <- ssr_batch4 %>% filter(Group == "Batch4_Builds" )
# hybrid <- ssr_batch4 %>% filter(Group == "SSR_Batch4_Builds" )
# res <- wilcox.test(baseline$BuildsRequired, hybrid$BuildsRequired, p.adjust.method = "BH")
# res
# Za = qnorm(res$p.value/2)
# ra = abs(Za)/sqrt(N)
# ra
build_data <- read.csv('batch_update_methods.csv')
baseline_data <- read.csv('baseline_dynamic_batching.csv')
library(dplyr)
group_by(build_data, update_method) %>%
summarise(
count = n(),
mean = mean(builds_saved, na.rm = TRUE),
sd = sd(builds_saved, na.rm = TRUE),
median = median(builds_saved, na.rm = TRUE),
IQR = IQR(builds_saved, na.rm = TRUE)
)
algorithms <- list("BATCHBISECT", "BATCHSTOP4", "BATCHDIVIDE4")
methods <- list(build_data$update_method)
factors <- list(build_data$factor)
final_methods <- c(methods, factors)
build_data['final_methods'] <- final_methods
kruskal.test(builds_saved ~ final_methods, data = build_data)
pairwise.wilcox.test(build_data$builds_saved, build_data$final_methods,p.adjust.method = "BH")
for (alg in algorithms) {
print(alg)
print("--------")
alg_data <- build_data %>% filter(algorithm == alg)
baseline_alg <- baseline_data %>% filter(algorithm == alg)
res <- kruskal.test(builds_saved ~ final_methods, data = alg_data)
print(res)
res <- pairwise.wilcox.test(alg_data$builds_saved, alg_data$final_methods,p.adjust.method = "BH")
print(res)
linear_2 <- alg_data %>% filter(update_method == "linear" & factor == "2")
linear_3 <- alg_data %>% filter(update_method == "linear" & factor == "3")
linear_4 <- alg_data %>% filter(update_method == "linear" & factor == "4")
exponential_2 <- alg_data %>% filter(update_method == "exponential" & factor == "2")
exponential_3 <- alg_data %>% filter(update_method == "exponential" & factor == "3")
random_linear <- alg_data %>% filter(update_method == "random_linear" & factor == "-1")
random_exp <- alg_data %>% filter(update_method == "random_exponential" & factor == "-1")
stagger_2 <- alg_data %>% filter(update_method == "stagger" & factor == "2")
stagger_3 <- alg_data %>% filter(update_method == "stagger" & factor == "3")
res <- wilcox.test(linear_2$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(linear_3$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(linear_4$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(exponential_2$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(exponential_3$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(random_linear$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(random_exp$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(stagger_2$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(stagger_3$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
}
build_data <- read.csv('batch_update_methods.csv')
baseline_data <- read.csv('baseline_dynamic_batching.csv')
library(dplyr)
group_by(build_data, update_method) %>%
summarise(
count = n(),
mean = mean(builds_saved, na.rm = TRUE),
sd = sd(builds_saved, na.rm = TRUE),
median = median(builds_saved, na.rm = TRUE),
IQR = IQR(builds_saved, na.rm = TRUE)
)
algorithms <- list("BATCHBISECT", "BATCHSTOP4", "BATCHDIVIDE4")
methods <- list(build_data$update_method)
factors <- list(build_data$factor)
final_methods <- c(methods, factors)
build_data['final_methods'] <- final_methods
kruskal.test(builds_saved ~ final_methods, data = build_data)
pairwise.wilcox.test(build_data$builds_saved, build_data$final_methods,p.adjust.method = "BH")
for (alg in algorithms) {
print(alg)
print("--------")
alg_data <- build_data %>% filter(algorithm == alg)
baseline_alg <- baseline_data %>% filter(algorithm == alg)
res <- kruskal.test(builds_saved ~ final_methods, data = alg_data)
print(res)
res <- pairwise.wilcox.test(alg_data$builds_saved, alg_data$final_methods,p.adjust.method = "BH")
print(res)
linear_2 <- alg_data %>% filter(update_method == "linear" & factor == "2")
linear_3 <- alg_data %>% filter(update_method == "linear" & factor == "3")
linear_4 <- alg_data %>% filter(update_method == "linear" & factor == "4")
exponential_2 <- alg_data %>% filter(update_method == "exponential" & factor == "2")
exponential_3 <- alg_data %>% filter(update_method == "exponential" & factor == "3")
random_linear <- alg_data %>% filter(update_method == "random_linear" & factor == "-1")
random_exp <- alg_data %>% filter(update_method == "random_exponential" & factor == "-1")
stagger_2 <- alg_data %>% filter(update_method == "stagger" & factor == "2")
stagger_3 <- alg_data %>% filter(update_method == "stagger" & factor == "3")
res <- wilcox.test(linear_2$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(linear_3$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(linear_4$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(exponential_2$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(exponential_3$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(random_linear$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(random_exp$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(stagger_2$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(stagger_3$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
}
build_data <- read.csv('all_batchbisect.csv')
library(dplyr)
group_by(build_data, method) %>%
summarise(
count = n(),
mean = mean(builds_saved, na.rm = TRUE),
sd = sd(builds_saved, na.rm = TRUE),
median = median(builds_saved, na.rm = TRUE),
IQR = IQR(builds_saved, na.rm = TRUE)
)
static_batching <- build_data %>% filter(method == "baseline_static" | method == "new_dynamic")
baseline_dynamic <- build_data %>% filter(method == "baseline_dynamic" | method == "new_dynamic")
timeout_rule <- build_data %>% filter(method == "timeout_rule" | method == "new_dynamic")
new_dynamic <- build_data %>% filter(method == "new_dynamic")
kruskal.test(builds_saved ~ method, data = static_batching)
kruskal.test(builds_saved ~ method, data = baseline_dynamic)
N <- 94
res <- pairwise.wilcox.test(static_batching$builds_saved, static_batching$method,p.adjust.method = "BH")
res
Za = qnorm(res$p.value/2)
ra = abs(Za)/sqrt(N)
ra
N <- 94
res <- pairwise.wilcox.test(baseline_dynamic$builds_saved, baseline_dynamic$method,p.adjust.method = "BH")
res
Za = qnorm(res$p.value/2)
ra = abs(Za)/sqrt(N)
ra
timeout_projects <- unique(build_data[build_data$method == "timeout_rule", "project"])
timeout_new_dynamic <- filter(new_dynamic, project %in% timeout_projects)
temp_projects <- unique(timeout_new_dynamic[, "project"])
new_timeout_rule <- filter(timeout_rule, project %in% temp_projects)
kruskal.test(builds_saved ~ method, data = new_timeout_rule)
build_data <- read.csv('batch_update_methods.csv')
baseline_data <- read.csv('baseline_dynamic_batching.csv')
library(dplyr)
group_by(build_data, update_method) %>%
summarise(
count = n(),
mean = mean(builds_saved, na.rm = TRUE),
sd = sd(builds_saved, na.rm = TRUE),
median = median(builds_saved, na.rm = TRUE),
IQR = IQR(builds_saved, na.rm = TRUE)
)
algorithms <- list("BATCHBISECT", "BATCHSTOP4", "BATCHDIVIDE4")
methods <- list(build_data$update_method)
factors <- list(build_data$factor)
final_methods <- c(methods, factors)
build_data['final_methods'] <- final_methods
kruskal.test(builds_saved ~ final_methods, data = build_data)
pairwise.wilcox.test(build_data$builds_saved, build_data$final_methods,p.adjust.method = "BH")
for (alg in algorithms) {
print(alg)
print("--------")
alg_data <- build_data %>% filter(algorithm == alg)
baseline_alg <- baseline_data %>% filter(algorithm == alg)
res <- kruskal.test(builds_saved ~ final_methods, data = alg_data)
print(res)
res <- pairwise.wilcox.test(alg_data$builds_saved, alg_data$final_methods,p.adjust.method = "BH")
print(res)
linear_2 <- alg_data %>% filter(update_method == "linear" & factor == "2")
linear_3 <- alg_data %>% filter(update_method == "linear" & factor == "3")
linear_4 <- alg_data %>% filter(update_method == "linear" & factor == "4")
exponential_2 <- alg_data %>% filter(update_method == "exponential" & factor == "2")
exponential_3 <- alg_data %>% filter(update_method == "exponential" & factor == "3")
random_linear <- alg_data %>% filter(update_method == "random_linear" & factor == "-1")
random_exp <- alg_data %>% filter(update_method == "random_exponential" & factor == "-1")
stagger_2 <- alg_data %>% filter(update_method == "stagger" & factor == "2")
stagger_3 <- alg_data %>% filter(update_method == "stagger" & factor == "3")
res <- wilcox.test(linear_2$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(linear_3$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(linear_4$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(exponential_2$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(exponential_3$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(random_linear$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(random_exp$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(stagger_2$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(stagger_3$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
}
build_data <- read.csv('batch_update_methods.csv')
baseline_data <- read.csv('baseline_dynamic_batching.csv')
library(dplyr)
group_by(build_data, update_method) %>%
summarise(
count = n(),
mean = mean(builds_saved, na.rm = TRUE),
sd = sd(builds_saved, na.rm = TRUE),
median = median(builds_saved, na.rm = TRUE),
IQR = IQR(builds_saved, na.rm = TRUE)
)
algorithms <- list("BATCHBISECT", "BATCHSTOP4", "BATCHDIVIDE4")
methods <- list(build_data$update_method)
factors <- list(build_data$factor)
final_methods <- c(methods, factors)
build_data['final_methods'] <- final_methods
kruskal.test(builds_saved ~ final_methods, data = build_data)
pairwise.wilcox.test(build_data$builds_saved, build_data$final_methods,p.adjust.method = "BH")
for (alg in algorithms) {
print(alg)
print("--------")
alg_data <- build_data %>% filter(algorithm == alg)
baseline_alg <- baseline_data %>% filter(algorithm == alg)
res <- kruskal.test(builds_saved ~ final_methods, data = alg_data)
print(res)
res <- pairwise.wilcox.test(alg_data$builds_saved, alg_data$final_methods,p.adjust.method = "BH")
print(res)
linear_2 <- alg_data %>% filter(update_method == "linear" & factor == "2")
linear_3 <- alg_data %>% filter(update_method == "linear" & factor == "3")
linear_4 <- alg_data %>% filter(update_method == "linear" & factor == "4")
exponential_2 <- alg_data %>% filter(update_method == "exponential" & factor == "2")
exponential_3 <- alg_data %>% filter(update_method == "exponential" & factor == "3")
random_linear <- alg_data %>% filter(update_method == "random_linear" & factor == "-1")
random_exp <- alg_data %>% filter(update_method == "random_exponential" & factor == "-1")
stagger_2 <- alg_data %>% filter(update_method == "stagger" & factor == "2")
stagger_3 <- alg_data %>% filter(update_method == "stagger" & factor == "3")
res <- wilcox.test(linear_2$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(linear_3$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(linear_4$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(exponential_2$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(exponential_3$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(random_linear$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(random_exp$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(stagger_2$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
res <- wilcox.test(stagger_3$builds_saved, baseline_alg$builds_saved, paired=TRUE)
print(res)
}
